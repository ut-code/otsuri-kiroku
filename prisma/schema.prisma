
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  orgMembers    OrganizationMember[]
  orgsCreated   Organization[]        @relation("UserOrganizations")
  invitesSent   OrganizationInvite[]  @relation("InvitedByUser")
  invitesAccepted OrganizationInvite[] @relation("AcceptedByUser")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id               String               @id
  name             String
  slug             String               @unique
  image            String?
  createdByUserId  String
  createdByUser    User                 @relation("UserOrganizations", fields: [createdByUserId], references: [id])
  createdAt        DateTime
  updatedAt        DateTime
  members          OrganizationMember[]
  invites          OrganizationInvite[]

  @@map("organization")
}

model OrganizationMember {
  id      String @id
  orgId   String
  userId  String
  role    String
  joinedAt DateTime

  org   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user  User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([orgId, userId])
  @@index([userId])
  @@index([orgId])
  @@map("organization_member")
}

model OrganizationInvite {
  id               String  @id
  orgId            String
  role             String
  token            String  @unique
  expiresAt        DateTime
  invitedByUserId  String
  acceptedByUserId String?
  acceptedAt       DateTime?
  revokedAt        DateTime?

  org            Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  invitedByUser  User         @relation("InvitedByUser", fields: [invitedByUserId], references: [id], onDelete: Cascade)
  acceptedByUser User?        @relation("AcceptedByUser", fields: [acceptedByUserId], references: [id])

  @@index([orgId])
  @@map("organization_invite")
}
